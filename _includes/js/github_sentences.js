// Generated by CoffeeScript 1.3.3
(function() {
  var commit_link, github_event_types, link_to, repo_link, strip_hash, user_link;

  repo_link = function(name) {
    return "<a href=\"http://github.com/" + name + "\" target=\"_blank\">" + name + "</a>";
  };

  user_link = function(username) {
    return "<a href=\"http://github.com/" + username + "\" target=\"_blank\">" + username + "</a>";
  };

  commit_link = function(commit, repo_name) {
    return "<a href=\"http://github.com/" + repo_name + "/commit/" + commit.sha + "\" target=\"_blank\">" + commit.message + "</a>";
  };

  strip_hash = function(link) {
    return link.replace(/\#.*$/, '');
  };

  link_to = function(url, name) {
    return "<a href=\"" + url + "\" target=\"_blank\">" + (name || url) + "</a>";
  };

  github_event_types = {
    "CommitCommentEvent": {
      name: "Commit Comment",
      render: function(event) {
        return {
          sentence: " " + (user_link(event.actor.login)) + " commented on " + (link_to(event.payload.comment.html_url, 'a commit')) + " in\n" + (repo_link(event.repo.name)) + " "
        };
      }
    },
    "CreateEvent": {
      name: "Repo or Branch Created",
      render: function(event) {
        if (event.payload.ref_type === "repository") {
          return {
            sentence: " " + (user_link(event.actor.login)) + " created " + event.payload.ref_type + " " + (repo_link(event.repo.name)) + " "
          };
        } else {
          return {
            sentence: " " + (user_link(event.actor.login)) + " created " + event.payload.ref_type + " \"" + event.payload.ref + "\" in " + (repo_link(event.repo.name)) + " "
          };
        }
      }
    },
    "DeleteEvent": {
      name: "Branch/Tag Deleted",
      render: function(event) {
        return {
          sentence: " " + (user_link(event.actor.login)) + " deleted " + event.payload.ref_type + " \"" + event.payload.ref + "\" in " + (repo_link(event.repo.name)) + " "
        };
      }
    },
    "DownloadEvent": {
      name: "Download",
      render: function(event) {
        return {
          sentence: " " + (user_link(event.actor.login)) + " uploaded " + (link_to(event.payload.download.html_url, event.payload.download.name)) + "\nto " + (repo_link(event.repo.name)) + " "
        };
      }
    },
    "FollowEvent": {
      name: "User Followed"
    },
    "ForkEvent": {
      name: "Fork",
      render: function(event) {
        return {
          sentence: " " + (user_link(event.actor.login)) + " forked " + (repo_link(event.repo.name)) + "\nto " + (repo_link(event.payload.forkee.full_name)) + " "
        };
      }
    },
    "ForkApplyEvent": {
      name: "Fork Applied"
    },
    "GistEvent": {
      name: "Gist Created/Updated"
    },
    "GollumEvent": {
      name: "Wiki Updated",
      render: function(event) {
        return {
          sentence: " " + (user_link(event.actor.login)) + " " + event.payload.pages.action + " " + (link_to(event.payload.pages.html_url, event.payload.pages.title)) + "\nin the " + (repo_link(event.repo.name)) + " wiki"
        };
      }
    },
    "IssueCommentEvent": {
      name: "Issue Comment",
      render: function(event) {
        var actionText;
        actionText = (function() {
          switch (event.payload.action) {
            case "created":
              return "commented on";
            default:
              return event.payload.action;
          }
        })();
        return {
          sentence: "" + (user_link(event.actor.login)) + " " + actionText + " " + (link_to(event.payload.issue.html_url, 'Issue #' + event.payload.issue.number)) + " in\n" + (repo_link(event.repo.name))
        };
      }
    },
    "IssuesEvent": {
      name: "Issue Opened/CLosed",
      render: function(event) {
        return {
          sentence: "" + (user_link(event.actor.login)) + " " + event.payload.action + " " + (link_to(event.payload.issue.html_url, 'Issue #' + event.payload.issue.number)) + " in\n" + (repo_link(event.repo.name))
        };
      }
    },
    "MemberEvent": {
      name: "Collaborator Added"
    },
    "PublicEvent": {
      name: "Repo Open-Sourced",
      render: function(event) {
        return {
          sentence: "" + (user_link(event.actor.login)) + " open-sourced " + (repo_link(event.repo.name))
        };
      }
    },
    "PullRequestEvent": {
      name: "Pull Request Opened/CLosed",
      render: function(event) {
        return {
          sentence: " " + (user_link(event.actor.login)) + " " + event.payload.action + "\n            " + (link_to(event.payload.pull_request.html_url, 'Pull Request #' + event.payload.pull_request.number)) + " in\n" + (repo_link(event.repo.name))
        };
      }
    },
    "PullRequestReviewCommentEvent": {
      name: "Pull Request Comment"
    },
    "PushEvent": {
      name: "Push",
      render: function(event) {
        var commit;
        commit = event.payload.commits instanceof Array ? event.payload.commits[0] : event.payload.commits;
        return {
          sentence: " " + (user_link(event.actor.login)) + " pushed " + (commit != null ? '"' + commit_link(commit, event.repo.name) + '"' : '') + "\nto " + (repo_link(event.repo.name)) + " "
        };
      }
    },
    "TeamAddEvent": {
      name: "Team Added"
    },
    "WatchEvent": {
      name: "Repo Watched",
      render: function(event) {
        return {
          sentence: " " + (user_link(event.actor.login)) + " " + event.payload.action + " watching " + (repo_link(event.repo.name)) + " "
        };
      }
    }
  };

  window.githubSentences = {
    eventTypes: github_event_types,
    convert: function(event) {
      var converted, html;
      if (github_event_types[event.type]["render"] != null) {
        converted = github_event_types[event.type]["render"](event);
      } else {
        converted = {
          sentence: event.type
        };
      }
      html = "<div class=\"github-sentence-item event-" + (event.type.toLowerCase()) + "\">\n  <div class=\"avatar\"><img src=\"" + event.actor.avatar_url + "\" /></div>\n  <div class=\"sentence\">" + converted.sentence + "</div>\n  <div class=\"timestamp\">" + event.created_at + "</div>";
      if (converted.details != null) {
        html += " <div class=\"details\">" + converted.details + "</div> ";
      }
      return html += "</div>";
    }
  };

}).call(this);
